#include<bits/stdc++.h>
using namespace std;


void buildTree(int *arr,int *tree, int start, int end, int treeNode){

    if(start==end){
        tree[treeNode]=arr[start];
        return;
    }

    int mid= (start+end)/2;
    buildTree(arr,tree,start,mid,2*treeNode);
    buildTree(arr,tree,mid+1,end,2*treeNode+1);

    tree[treeNode]= min(tree[2*treeNode],tree[2*treeNode+1]) ;
}


void updateTree(int *arr,int *tree,int start,int end, int treeNode, int idx,int value){


    if(start==end){
        arr[idx]=value;
        tree[treeNode]=value;
        return;
    }


    int mid= (start+end)/2;

    if(idx>mid){
        updateTree(arr,tree,mid+1,end,2*treeNode+1,idx,value);
    }else{
        updateTree(arr,tree,start,mid,2*treeNode,idx,value);
    }

    tree[treeNode]=min(tree[2*treeNode],tree[2*treeNode+1]);

}
int queryTree(int *tree, int start,int end, int treeNode, int left, int right){

    //completely outside the range

    
    if(start>right || left>end ){
        return INT_MAX;
    }
    //completely inside the range
    if(start>=left && end<=right){
        return tree[treeNode];
    }
    //partially inside
    int mid= (start+end)/2;
    int ans1= queryTree(tree,start,mid,2*treeNode,left,right);
    int ans2= queryTree(tree,mid+1,end,2*treeNode+1,left,right);
    return min(ans1,ans2);

}
int main() {

	// Write your code here
    
    int n,q;
    
        cin>>n>>q;
        int arr[n];
        for(int i=0;i<n;i++){
            cin>>arr[i];
        }
        int *tree= new int[4*n];
        buildTree(arr,tree,0,n-1,1);
        char query;
        int arg1,arg2;
        while(q--){
            cin>>query>>arg1>>arg2;
            if(query=='q'){
                arg1--; arg2--;   //because both are indices
                cout<<queryTree(tree,0,n-1,1,l,r)<<endl;
            }else if(query=='u'){
                arg1--;              //only a
                updateTree(arr,tree,0,n-1,1,l,r);
            }
        } 
 
}

