#include<bits/stdc++.h>
#define ll long long int
#define ld long double

using namespace std;
 
void buildSeg(string &s,int tree[],long l,long r,long curr){
    if(l==r){
        tree[curr]=(s[l]-'0');
        return;
    }
    long mid=(l+r)/2;
    buildSeg(s,tree,l,mid,2*curr+1);
    buildSeg(s,tree,mid+1,r,2*curr+2);
    tree[curr]=((tree[2*curr+1]*((r-mid)%2+1))+tree[curr*2+2])%3;
}
 
void update(long idx,int tree[],long l,long r,long curr){
    if(l==r){
        tree[curr]=1;
        return;
    }
    long mid=(l+r)/2;
    if(idx<=mid)
        update(idx,tree,l,mid,curr*2+1);
    else
        update(idx,tree,mid+1,r,curr*2+2);
    tree[curr]=((tree[2*curr+1]*((r-mid)%2+1))+tree[curr*2+2])%3;
}
 
void update(long idx,string &s,int tree[],long n){
    if(s[idx]=='1')
        return;
    update(idx,tree,0,n-1,0);
    s[idx]='1';
}
 
int query(int tree[],long ql,long qr,int l,int r,int curr){
    if(ql>qr || ql>r || qr<l)
        return 0;
    if(ql<=l && r<=qr)
        return (tree[curr]*((qr-r)%2+1))%3;
    long mid=(l+r)/2;
    return (query(tree,ql,qr,l,mid,curr*2+1)+query(tree,ql,qr,mid+1,r,curr*2+2))%3;
}
 
int main(){
   
    long n,_=0;
    cin>>n;
    string s;
    cin>>s;
    while((1<<_)<n)
        _++;
    _++;
   
    int tree[(1<<_)];
    buildSeg(s,tree,0,n-1,0);
    long z;
    cin>>z;
    while(z--){
        int t;
        long l,r;
        cin>>t;
        switch(t){
            case 0:cin>>l>>r;
            cout<<query(tree,l,r,0,n-1,0)<<"\n";
            break;
            case 1:cin>>l;
            update(l,s,tree,n);
            break;
        }
    }
    
    return 0;
}