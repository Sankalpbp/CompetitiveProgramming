#include<iostream>

using namespace std;
typedef long long ll;

ll query(ll* tree,ll* lazy, ll start, ll end, ll left, ll right, ll pos){
    if(start>end|| left>end || right< start)
        return 0;
    
    if(lazy[pos]){
        tree[pos]+= (end-start+1)*lazy[pos];
        if(start!=end){
            lazy[2*pos]+= lazy[pos];
            lazy[2*pos+1]+= lazy[pos];
        }
        lazy[pos]=0;
    }
    
    if(start>=left && end<=right){
        return tree[pos];
    }
    
    ll mid=(start+end)/2;
    return query(tree,lazy,start,mid,left,right,2*pos)+ query(tree,lazy,mid+1,end,left, right,2*pos+1);
    
    
}

void updateSegTreeLazy(ll* tree, ll* lazy, ll start, ll end, ll left, ll right, ll val, ll pos){
      
    
    
    if(lazy[pos]!=0){
        
        tree[pos]+=lazy[pos]*(end-start+1);
        if(start!=end){
            lazy[2*pos]+=lazy[pos];
            lazy[2*pos+1]+=lazy[pos];
        }
        lazy[pos]=0;
    }
   
    if(start>end|| left>end || right< start)
        return;
    
    if(start>=left && end<= right){
        tree[pos]+=val*(end-start+1);
        if(start!=end){
            lazy[2*pos]+=val;
            lazy[2*pos+1]+=val;
        }
        return;
    }
    
    ll mid= (start+end)/2;
    
    updateSegTreeLazy(tree,lazy,start,mid,left,right,val,2*pos);
    updateSegTreeLazy(tree,lazy,mid+1,end, left, right, val,2*pos+1);
    
    tree[pos]= tree[2*pos]+tree[2*pos+1];
    
}

int main(){
    
    ll t;
    cin>>t;
    
    ll n,c,p,q,v;
    int type;
    
    while(t--){
        cin>>n>>c;
        
        ll* tree= new ll[3*n]();
        ll* lazy= new ll[3*n]();
        
        while(c--){
            cin>>type;
            if(type==0){
                cin>>p>>q>>v;
                p--;q--;
                updateSegTreeLazy(tree,lazy,0,n-1,p,q,v,1);
            }else{
                cin>>p>>q;
                p--;q--;
                ll ans= query(tree,lazy,0,n-1,p,q,1);
                cout<<ans<<"\n";
            }
        }
    }
    
}