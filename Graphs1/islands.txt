
#include<bits/stdc++.h>

void bfs(int** edges, bool* visited, int n, int start){

    queue<int>q;
    q.push(start);
    visited[start]=true;
    int curr;

    while(!q.empty()){
        curr= q.front();
        q.pop();
    

        for(int i=0;i<n;i++){
            if(curr==i){
                continue;
            }
            if(edges[i][curr] && !visited[i]){
                visited[i]=true;
                q.push(i);
            }
        }

    }
}

int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
    
    
    int **edges= new int*[n];
    for(int i=0;i<n;i++){
        edges[i]=new int[n];
        for(int j=0;j<n;j++){
            edges[i][j]=0;
        }
    }
    int s,f;
    for(int i=0;i<m;i++){
        s=u[i]-1;
        f=v[i]-1;
        edges[s][f]=1;
        edges[f][s]=1;
    }
 
    bool *visited= new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
    }
    int count=0;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            count++;
            bfs(edges,visited,n,i);
        }
    }
    return count;
    
}