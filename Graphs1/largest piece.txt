

int dfs(char cake[NMAX][NMAX], int i , int j, int n, bool **visited){
    
  
    if(i<0 || j<0 || i>=n || j>=n){
        return 0;
    }
    if(visited[i][j]==true){
        return 0;
    }
    
    visited[i][j]=true;
    
    if(cake[i][j]=='0'){
        return 0;
    }

    if(cake[i][j]=='1'){
        
    return 1 + dfs(cake,i,j+1,n,visited)+dfs(cake,i,j-1,n,visited)+ dfs(cake,i-1,j,n,visited)+ dfs(cake,i+1,j,n,visited);
    
    }
   
    
   
    
}


int solve(int n,char cake[NMAX][NMAX])
{
	// Write your code here .
    

    int maxAns=-1;
    int ans;
    
    bool ** visited= new bool*[n];
    for(int i=0;i<n;i++){
        visited[i]=new bool[n];
        for(int j=0;j<n;j++){
            visited[i][j]=false;
        }
    }
    
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(cake[i][j]=='1'){
                ans= dfs(cake,i,j,n,visited);
                if(ans>maxAns){
                    maxAns=ans;
                }
            }
        }
    }
    return maxAns;
}