#include<bits/stdc++.h>
using namespace std;

void dfs(vector<int>*edges, int start, bool* visited, unordered_set<int>*component ){

    visited[start]= true;
    component->insert(start);

    for(int i=0;i<edges[start].size();i++){
        int next= edges[start][i];
        if(!visited[next]){
            dfs(edges,next,visited,component);
        }
    }

}

unordered_set<unordered_set<int>*>* getComponents(vector<int>*edges, int n,bool* visited){

    unordered_set<unordered_set<int>*>* output= new unordered_set<unordered_set<int>*>();
    for(int i=0;i<n;i++){
        if(!visited[i]){
            unordered_set<int>* component = new unordered_set<int>();
            dfs(edges,i,visited,component);
            output->insert(component);
        }
    }

    delete [] visited;
    return output;

}

int main(){
    
    int t;
    cin>>t;
    while(t--){
    int n,m;
    cin>>n>>m;
        
        
    int p[n],q[n];
    
        for(int i=0;i<n;i++){
            cin>>p[i];
        }
         for(int i=0;i<n;i++){
            cin>>q[i];
        }
        bool *visited= new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
    }
    vector<int>*edges= new vector<int>[n];
    int j,k;
    for(int i=0;i<m;i++){
        cin>>j>>k;
        edges[j-1].push_back(k-1);
        edges[k-1].push_back(j-1);
    }
    

    unordered_set < unordered_set<int>*>*components  = getComponents(edges,n,visited);

    unordered_set < unordered_set<int>*>:: iterator it1= components->begin();
        int flag=-1;
    while(it1!= components->end()){
        unordered_set<int> m;
        unordered_set<int>* component = *it1;
        unordered_set<int>::iterator it2= component->begin();
        unordered_set<int>::iterator it= component->begin();
        while(it2!= component->end()){
            m.insert(p[*it2]);
            it2++;
        }
       while(it!=component->end()){
           if(m.find(q[*it])==m.end()){
               cout<<"NO"<<endl;
               flag=0;
               break;
           }
           it++;
       }
        if(flag==0)
            break;
    it1++;
    }
        if(flag==-1)
            cout<<"YES"<<endl;
  }
 return 0;
}
    